{
	"info": {
		"_postman_id": "eafe1e98-cbf1-4ff9-8dc8-1dce3625ec94",
		"name": "Films Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35095055",
		"_collection_link": "https://www.postman.com/maintenance-meteorologist-35063580/workspace/30-days-of-postman-eugene-yu/collection/35095055-eafe1e98-cbf1-4ff9-8dc8-1dce3625ec94?action=share&source=collection_link&creator=35095055"
	},
	"item": [
		{
			"name": "GET All Films",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"title\": \"Generated schema for Root\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"count\": {",
							"      \"type\": \"number\"",
							"    },",
							"    \"next\": {},",
							"    \"previous\": {},",
							"    \"results\": {",
							"      \"type\": \"array\",",
							"      \"items\": {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"          \"title\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"episode_id\": {",
							"            \"type\": \"number\"",
							"          },",
							"          \"opening_crawl\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"director\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"producer\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"release_date\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"characters\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"planets\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"starships\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"vehicles\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"species\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"created\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"edited\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"url\": {",
							"            \"type\": \"string\"",
							"          }",
							"        },",
							"        \"required\": [",
							"          \"title\",",
							"          \"episode_id\",",
							"          \"opening_crawl\",",
							"          \"director\",",
							"          \"producer\",",
							"          \"release_date\",",
							"          \"characters\",",
							"          \"planets\",",
							"          \"starships\",",
							"          \"vehicles\",",
							"          \"species\",",
							"          \"created\",",
							"          \"edited\",",
							"          \"url\"",
							"        ]",
							"      }",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"count\",",
							"    \"next\",",
							"    \"previous\",",
							"    \"results\"",
							"  ],",
							"\t\"additionalProperties\": false",
							"};",
							"",
							"pm.test(\"1. Validate response status (200) for all films\", () => {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"2. Validate response body json schema\", () => {",
							"\tpm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"pm.test(\"3. Validate response time (150ms)\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});",
							"",
							"pm.test(\"4. Validate ‘count’ response property matches the number of ‘results’ property\", () => {",
							"    var jsonData = pm.response.json();",
							"\t\tconst count = jsonData.count;",
							"\t\t",
							"    pm.expect(jsonData.results).to.be.an('array').and.to.have.length(count);",
							"});",
							"",
							"pm.test(\"5. Validate each films in the ‘results’ property contain correct properties\", () => {",
							"    var jsonData = pm.response.json();",
							"    var requiredProps = ['title', 'episode_id', 'opening_crawl', 'director', 'producer', 'release_date', 'species', 'starships', 'vehicles', 'characters', 'planets', 'url', 'created', 'edited'];",
							"    jsonData.results.forEach(function(film) {",
							"        requiredProps.forEach(function(prop) {",
							"            pm.expect(film).to.have.property(prop);",
							"        });",
							"    });",
							"});",
							"",
							"pm.test(\"6. Validate date formats in response\", () => {",
							"    const jsonData = pm.response.json();",
							"    const results = jsonData.results;",
							"    ",
							"    const dateFormatRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
							"    const dateTimeFormatRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}Z$/;",
							"    ",
							"    results.forEach((film, index) => {",
							"        pm.test(`6. Validating date format ${index + 1}`, () => {",
							"            pm.expect(film.release_date).to.match(dateFormatRegex, `release_date has correct format`);",
							"            pm.expect(film.created).to.match(dateTimeFormatRegex, `created has correct format`);",
							"            pm.expect(film.edited).to.match(dateTimeFormatRegex, `edited has correct format`);",
							"        });",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/films",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"films"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Specific Film",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"title\": \"Generated schema for Root\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"title\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"episode_id\": {",
							"      \"type\": \"number\"",
							"    },",
							"    \"opening_crawl\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"director\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"producer\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"release_date\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"characters\": {",
							"      \"type\": \"array\",",
							"      \"items\": {",
							"        \"type\": \"string\"",
							"      }",
							"    },",
							"    \"planets\": {",
							"      \"type\": \"array\",",
							"      \"items\": {",
							"        \"type\": \"string\"",
							"      }",
							"    },",
							"    \"starships\": {",
							"      \"type\": \"array\",",
							"      \"items\": {",
							"        \"type\": \"string\"",
							"      }",
							"    },",
							"    \"vehicles\": {",
							"      \"type\": \"array\",",
							"      \"items\": {",
							"        \"type\": \"string\"",
							"      }",
							"    },",
							"    \"species\": {",
							"      \"type\": \"array\",",
							"      \"items\": {",
							"        \"type\": \"string\"",
							"      }",
							"    },",
							"    \"created\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"edited\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"url\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"title\",",
							"    \"episode_id\",",
							"    \"opening_crawl\",",
							"    \"director\",",
							"    \"producer\",",
							"    \"release_date\",",
							"    \"characters\",",
							"    \"planets\",",
							"    \"starships\",",
							"    \"vehicles\",",
							"    \"species\",",
							"    \"created\",",
							"    \"edited\",",
							"    \"url\"",
							"  ],",
							"\t\"additionalProperties\": false",
							"};",
							"",
							"pm.test(\"9. Validate response status (200) for individual film\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"10. Validate response body json schema\", () => {",
							"\tpm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"pm.test(\"11. Validate response time (150ms)\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});",
							"",
							"pm.test(\"12. Validate the response body contains correct properties\", () => {",
							"    var jsonData = pm.response.json();",
							"    var requiredProps = ['title', 'episode_id', 'opening_crawl', 'director', 'producer', 'release_date', 'species', 'starships', 'vehicles', 'characters', 'planets', 'url', 'created', 'edited'];",
							"    requiredProps.forEach(function(prop) {",
							"        pm.expect(jsonData).to.have.property(prop);",
							"    });",
							"});",
							"",
							"pm.test(\"13. Validate the date format in response body properties\", () => {",
							"",
							"});",
							"",
							"pm.test(\"14. Validate the url format in response body results properties\", () => {",
							"    var jsonData = pm.response.json();",
							"    var arrayProps = ['characters', 'planets', 'starships', 'vehicles', 'species'];",
							"    arrayProps.forEach(function(prop) {",
							"        pm.expect(jsonData[prop]).to.be.an('array');",
							"        jsonData[prop].forEach(function(url) {",
							"            pm.expect(url).to.match(/^https:\\/\\/swapi\\.dev\\/api\\/.+\\/\\d+\\/?$/);",
							"        });",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/films/{{id}}/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"films",
						"{{id}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Non-existent Film",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"15. Validate when [id] is invalid (out of range or random characters)\", () => {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/films/999/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"films",
						"999",
						""
					]
				}
			},
			"response": []
		}
	]
}